import os
from venv import logger

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from src.utils import logger




class Keyboards:
    PAIRS_PER_PAGE = 6
    currency_pairs = (
    "üá¶üá∫ AUD/CAD OTC üá®üá¶", "üá¶üá∫ AUD/CHF OTC üá®üá≠", "üá¶üá∫ AUD/USD OTC üá∫üá∏",
    "üá®üá¶ CAD/CHF OTC üá®üá≠", "üá®üá¶ CAD/JPY OTC üáØüáµ", "üá®üá≠ CHF/NOK OTC üá≥üá¥",
    "üá™üá∫ EUR/CHF OTC üá®üá≠", "üá™üá∫ EUR/GBP OTC üá¨üáß", "üá™üá∫ EUR/JPY OTC üáØüáµ",
    "üá™üá∫ EUR/NZD OTC üá≥üáø", "üá™üá∫ EUR/TRY OTC üáπüá∑", "üá™üá∫ EUR/USD OTC üá∫üá∏",
    "üá¨üáß GBP/JPY OTC üáØüáµ", "üá≥üáø NZD/JPY OTC üáØüáµ", "üá∫üá∏ USD/BDT OTC üáßüá©",
    "üá∫üá∏ USD/BRL OTC üáßüá∑", "üá∫üá∏ USD/BRL OTC üáßüá∑", "üá∫üá∏ USD/JPY OTC üáØüáµ",
    "üá∫üá∏ USD/RUB OTC üá∑üá∫", "üá∫üá∏ USD/SGD OTC üá∏üá¨", "üá∫üá∏ USD/THB OTC üáπüá≠",
    "üá∫üá∏ USD/EGP OTC üá™üá¨", "üá®üá≠ CHF/JPY OTC üáØüáµ", "üá∫üá∏ USD/CHF OTC üá®üá≠",
    "üá∫üá∏ USD/INR OTC üáÆüá≥", "üá≥üáø NZD/USD OTC üá∫üá∏", "üá∫üá∏ USD/IDR OTC üáÆüá©",
    "üá¶üá∫ AUD/JPY OTC üáØüáµ", "üá™üá∫ EUR/RUB OTC üá∑üá∫", "üá∫üá∏ USD/MXN OTC üá≤üáΩ",
    "üá∫üá∏ USD/CNH OTC üá®üá≥", "üá¶üá∫ AUD/NZD OTC üá≥üáø", "üá∫üá∏ USD/MYR OTC üá≤üáæ",
    "üá∫üá∏ USD/PKR OTC üáµüá∞", "üá∫üá∏ USD/DZD OTC üá©üáø", "üá∫üá∏ USD/ARS OTC üá¶üá∑",
    "üá™üá∫ EUR/HUF OTC üá≠üá∫", "üá∫üá∏ USD/VND OTC üáªüá≥", "üá¨üáß GBP/AUD OTC üá¶üá∫",
    "üá∫üá∏ USD/PHP OTC üáµüá≠", "üá∫üá∏ USD/CLP OTC üá®üá±", "üá∫üá∏ USD/COP OTC üá®üá¥"
)

    all_pairs = {
        'currency': currency_pairs,
    }
    @staticmethod
    def get_welcome_menu() -> InlineKeyboardMarkup:
        activate_button = InlineKeyboardButton('üöÄActivate botüöÄ', callback_data='registration_request')
        benefit_button = InlineKeyboardButton("‚ùîÔ∏èWhat I'm getting‚ùîÔ∏è", callback_data='user_benefits')
        channel_button = InlineKeyboardButton('üí∞Telegram channelüí∞', url='https://www.google.com/')
        questions_pirates_button = InlineKeyboardButton('‚ÅâÔ∏èAny questions ‚ÅâÔ∏èÔ∏è', url='https://www.google.com/')
        instruction_button = InlineKeyboardButton('üìñInstructionüìñ', url='https://www.google.com/')
        feedback_button = InlineKeyboardButton('üë•Feedbacküë•', url='https://www.google.com/')
        return InlineKeyboardMarkup(row_width=1).add(activate_button, benefit_button, channel_button,
                                                     questions_pirates_button, instruction_button, feedback_button)

    @staticmethod
    def get_registration_menu(menu_owner: str) -> InlineKeyboardMarkup:
        registration_button = InlineKeyboardButton('üîóRegistration link', url=os.getenv('REF_URL', '–í–ø–∏—à–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É'))
        check_registration_button = InlineKeyboardButton('üîéCheck Registration', callback_data='check_registration')
        back_button = InlineKeyboardButton('üîôBack', callback_data=f'start_callback')
        return InlineKeyboardMarkup(row_width=1).add(registration_button, check_registration_button, back_button)

    @staticmethod
    def get_back_registration_button(menu_owner: str) -> InlineKeyboardMarkup:
        menu_button = InlineKeyboardButton('üîôBack', callback_data=f'registration_request')
        return InlineKeyboardMarkup(row_width=1).add(menu_button)

    @staticmethod
    def get_deposit_markup() -> InlineKeyboardMarkup:
        deposit_button = InlineKeyboardButton('üí∞Top upüí∞', url=os.getenv('DEP_URL'))
        deposit_check_button = InlineKeyboardButton('Check deposit ‚úÖ', callback_data='check_deposit')
        return InlineKeyboardMarkup(row_width=1).add(deposit_button, deposit_check_button)

    # @staticmethod
    # def get_main_menu() -> InlineKeyboardMarkup:
    #     signals_button = InlineKeyboardButton('‚ö°Ô∏èGet signal', callback_data='get_signals')
    #     return InlineKeyboardMarkup(row_width=1).add(signals_button)

    @staticmethod
    def get_signals_menu() -> InlineKeyboardMarkup:
        currency_signal_button = InlineKeyboardButton('üíπ–°urrency pairs', callback_data='currency_signal')
        cryptocurrency_signal_button = InlineKeyboardButton('üí∞Cryptocurrency', callback_data='cryptocurrency_signal')
        commodities_signal_button = InlineKeyboardButton('üèÜCommodities', callback_data='commodities_signal')
        shares_signal_button = InlineKeyboardButton('üìàShares', callback_data='shares_signal')
        indices_signal_button = InlineKeyboardButton('üìäIndices', callback_data='indices_signal')
        # back_main_menu_button = InlineKeyboardButton('üîôBack', callback_data=f'main_menu')
        return InlineKeyboardMarkup(row_width=1).add(currency_signal_button, cryptocurrency_signal_button,
                                                     commodities_signal_button, shares_signal_button,
                                                     indices_signal_button)

    @classmethod
    def get_signal_pairs_menu(cls, signal_type: str, page: int = 0) -> InlineKeyboardMarkup | None:
        keyboard = InlineKeyboardMarkup(row_width=2)
        start_idx = page * cls.PAIRS_PER_PAGE
        end_idx = start_idx + cls.PAIRS_PER_PAGE
        keyboard_pairs = cls.all_pairs.get(signal_type)
        if not keyboard_pairs:
            logger.error("There is no such pair type in all_pairs")
            return
        current_pairs = keyboard_pairs[start_idx:end_idx]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
        for pair in current_pairs:
            pair_text = pair[3:len(pair)-2]
            keyboard.insert(InlineKeyboardButton(text=pair, callback_data=f"pair_{pair_text}"))

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        total_pages = (len(keyboard_pairs) - 1) // cls.PAIRS_PER_PAGE + 1
        pagination_buttons = []

        if page > 0:
            pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page_{page - 1}_{signal_type}"))

        pagination_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="none"))

        if end_idx < len(keyboard_pairs):
            pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page_{page + 1}_{signal_type}"))

        keyboard.row(*pagination_buttons)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard.add(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="get_signals"))

        return keyboard

    @staticmethod
    def get_analysis_menu():
        indicator_analysis_button = InlineKeyboardButton('üöÄIndicatorüöÄ', callback_data='currency_signal')
        candle_analysis_button = InlineKeyboardButton('üß®Candleüß®', callback_data='currency_signal')
        return InlineKeyboardMarkup(row_width=1).add(indicator_analysis_button, candle_analysis_button)



